import request from "supertest";
import testApp from "../utils/setupTestServer";
import "../utils/setupTestDB"; // Connexion √† SQLite in-memory.

let authToken: string | null = null;
let testPatchnoteId: number;

beforeAll(async () => {
	console.log("üîÑ Tentative de connexion pour r√©cup√©rer le token...");

	const response = await request(testApp)
		.post("/api/auth/login")
		.send({ login: "admin", password: "password_hash_1" });

	if (response.status === 200) {
		authToken = response.body.token;
		console.log("‚úÖ Token r√©cup√©r√© pour tests:", authToken);
	} else {
		console.error("‚ùå √âchec de connexion lors des tests :", response.body);
		throw new Error("üö® Impossible d'obtenir un token d'authentification.");
	}

	console.log("üõ† Insertion d'un patchnote de test...");

	const createPatchnoteResponse = await request(testApp)
		.post("/api/patchnotes")
		.set("Authorization", `Bearer ${authToken}`)
		.send({
			version: "1.0.0",
			title: "Mise √† jour initiale",
			date: "2024-01-01T00:00:00.000Z",
			author: "Admin",
			content: "Ajout de nouvelles fonctionnalit√©s.",
			state: "PUBLISHED",
		});

	if (createPatchnoteResponse.status === 201) {
		testPatchnoteId = createPatchnoteResponse.body.id;
		console.log("‚úÖ Patchnote de test ins√©r√© avec ID:", testPatchnoteId);
	} else {
		console.error(
			"‚ùå Erreur lors de l'insertion du patchnote:",
			createPatchnoteResponse.body,
		);
		throw new Error("üö® Impossible d'ins√©rer un patchnote de test.");
	}
});

describe("üìú API des patchnotes.", () => {
	test("‚úÖ GET /api/patchnotes - Retourne tous les patchnotes.", async () => {
		const response = await request(testApp).get("/api/patchnotes");

		expect(response.status).toBe(200);
		expect(Array.isArray(response.body)).toBe(true);
		expect(response.body.length).toBeGreaterThan(0);
	});

	test("‚úÖ GET /api/patchnotes/:id - Retourne un patchnote sp√©cifique.", async () => {
		const response = await request(testApp).get(
			`/api/patchnotes/${testPatchnoteId}`,
		);

		expect(response.status).toBe(200);
		expect(response.body).toHaveProperty("id", testPatchnoteId);
		expect(response.body).toHaveProperty("title", "Mise √† jour initiale");
	});

	test("‚úÖ POST /api/patchnotes - Cr√©e un nouveau patchnote (authentification requise).", async () => {
		const response = await request(testApp)
			.post("/api/patchnotes")
			.set("Authorization", `Bearer ${authToken}`)
			.send({
				version: "1.1.0",
				title: "Deuxi√®me mise √† jour",
				date: "2024-02-01T00:00:00.000Z",
				author: "Admin",
				content: "Am√©lioration des performances.",
				state: "PUBLISHED",
			});

		expect(response.status).toBe(201);
		expect(response.body).toHaveProperty("id");
		expect(response.body.title).toBe("Deuxi√®me mise √† jour");
	});

	test("‚úÖ PATCH /api/patchnotes/:id - Met √† jour un patchnote existant (authentification requise).", async () => {
		const response = await request(testApp)
			.patch(`/api/patchnotes/${testPatchnoteId}`)
			.set("Authorization", `Bearer ${authToken}`)
			.send({ title: "Titre mis √† jour" });

		expect(response.status).toBe(200);
		expect(response.body).toHaveProperty("title", "Titre mis √† jour");
	});

	test("‚úÖ PUT /api/patchnotes/:id - Remplace enti√®rement un patchnote existant (authentification requise).", async () => {
		const response = await request(testApp)
			.put(`/api/patchnotes/${testPatchnoteId}`)
			.set("Authorization", `Bearer ${authToken}`)
			.send({
				version: "1.0.1",
				title: "Patchnote compl√®tement remplac√©",
				date: "2024-01-05T00:00:00.000Z",
				author: "Admin",
				content: "Correctifs divers.",
				state: "DRAFT",
			});

		expect(response.status).toBe(200);
		expect(response.body).toHaveProperty(
			"title",
			"Patchnote compl√®tement remplac√©",
		);
		expect(response.body).toHaveProperty("state", "DRAFT");
	});

	test("‚úÖ DELETE /api/patchnotes/:id - Supprime un patchnote (authentification requise).", async () => {
		const response = await request(testApp)
			.delete(`/api/patchnotes/${testPatchnoteId}`)
			.set("Authorization", `Bearer ${authToken}`);

		expect(response.status).toBe(200);
		expect(response.body).toHaveProperty("message", "Patchnote supprim√©.");
	});

	test("‚ùå GET /api/patchnotes/:id - Retourne 404 si le patchnote n'existe pas.", async () => {
		const response = await request(testApp).get("/api/patchnotes/999");

		expect(response.status).toBe(404);
		expect(response.body).toHaveProperty("error", "Patchnote introuvable.");
	});

	test("‚ùå POST /api/patchnotes - Retourne 401 si aucun token n'est fourni.", async () => {
		const response = await request(testApp).post("/api/patchnotes").send({
			version: "1.2.0",
			title: "Nouvelle mise √† jour",
			date: "2024-03-01T00:00:00.000Z",
			author: "Admin",
			content: "Nouveaux changements.",
			state: "PUBLISHED",
		});

		expect(response.status).toBe(401);
		expect(response.body).toHaveProperty(
			"error",
			"Acc√®s refus√©, token manquant.",
		);
	});
});
